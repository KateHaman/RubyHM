puts '1. Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
arr = [-11, -9, -7, -5, -3, -1, 0, 2, 4, 6, 8, 10]
arr.select.with_index {|n, idx| idx.even?}
arr.select.with_index {|n, idx| idx.odd?}
'-------------------------------------------------'
puts '2. Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
arr = [-11, -9, -7, -5, -3, -1, 0, 2, 4, 6, 8, 10]
arr.select.with_index {|n, idx| idx.odd?}
arr.select.with_index {|n, idx| idx.even?}
'-------------------------------------------------'
puts '3. Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
arr = [0, 25]
arr.index(arr.select {|num| arr[0] < num && num < arr[-1]}.first) || []
'-------------------------------------------------'
puts '4. Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
arr = [0, 2, 3]
arr.index(arr.select {|num| arr[0] < num && num < arr[-1]}.last) || []
'-------------------------------------------------'
puts '5. Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.even?}).map {|a| arr[0]+a}
'-------------------------------------------------'
puts '6. Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.even?}).map {|a| arr[-1]+a}
'-------------------------------------------------'
puts '7. Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам последний элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.odd?}).map {|a| arr[-1]+a}
'-------------------------------------------------'
puts '8. Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам первый элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.odd?}).map {|a| arr[0]+a}
'-------------------------------------------------'
puts '9. Дан целочисленный массив. Заменить все положительные элементы на значение минимального.'
arr = [-20, 5, -3, 0, 11, -22]
arr_min = arr.min
arr.each_index{|i| arr[i] = arr_min if arr[i] > 0}
'-------------------------------------------------'
puts '10. Дан целочисленный массив. Заменить все положительные элементы на значение максимального.'
arr = [-20, 5, -3, 0, 11, -22]
arr_max = arr.max
arr.each_index{|i| arr[i] = arr_max if arr[i] > 0}
'-------------------------------------------------'
puts '11. Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.'
arr = [-20, 5, -3, 0, 11, -22]
arr_min = arr.min
arr.each_index{|i| arr[i] = arr_min if arr[i] < 0}
'-------------------------------------------------'
puts '12. Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.'
arr = [-20, 5, -3, 0, 11, -22]
arr_max = arr.max
arr.each_index{|i| arr[i] = arr_max if arr[i] < 0}
'-------------------------------------------------'
puts '13. Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
arr = [-20, 5, -3, 0, 11, -22]
arr.rotate(1)
'-------------------------------------------------'
puts '14. Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
arr = [-20, 5, -3, 0, 11, -22]
arr.rotate(-1)
'-------------------------------------------------'
puts '17. Дан целочисленный массив. Найти количество его локальных максимумов.'
arr = [-20, 5, -3, 0, 11, -22]
count = 0
for i in 1..(arr.count-2)
  count += 1 if arr[i] > arr[i-1] && arr[i] > arr[i+1]
end
count
'-------------------------------------------------'
puts '18. Дан целочисленный массив. Найти количество его локальных минимумов.'
arr = [-20, 5, -3, 0, 11, -22]
count = 0
for i in 1..(arr.count-2)
  count += 1 if arr[i] < arr[i-1] && arr[i] < arr[i+1]
end
count
'-------------------------------------------------'
puts '19. Дан целочисленный массив. Найти максимальный из его локальных максимумов.'
arr = [-20, 5, -3, 0, 11, -22]
maxs = []
for i in 1..(arr.count-2)
  maxs.push(arr[i]) if arr[i] > arr[i-1] && arr[i] > arr[i+1]
end
maxs.max
'-------------------------------------------------'
puts '20. Дан целочисленный массив. Найти минимальный из его локальных минимумов.'
arr = [-20, 5, -3, 0, 11, -22]
mins = []
for i in 1..(arr.count-2)
    mins.push(arr[i]) if arr[i] < arr[i-1] && arr[i] < arr[i+1]
end
mins.min
'-------------------------------------------------'
puts '25. Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.'
arr = [-20, 5, -3, 0, 11, -22]
i = 0
while i <= arr.count - 1
  if arr[i] > 0
    arr.insert(i, arr[0])
    i += 2
  else
    i += 1
  end
end
arr
'-------------------------------------------------'
puts '26. Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
arr = [-20, 5, -3, 0, 11, -22]
i = 0
while i <= arr.count - 1
  if arr[i] > 0
    arr.insert(i+1, arr[0])
    i += 2
  else
    i += 1
  end
end
arr
'-------------------------------------------------'
puts '27. Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.'
arr = [-20, 5, -3, 0, 11, -22]
i = 0
while i <= arr.count - 1
  if arr[i] < 0
    arr.insert(i+1, arr[0])
    i += 2
  else
    i += 1
  end
end
arr
'-------------------------------------------------'
puts '28. Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.'
arr = [-20, 5, -3, 0, 11, -22]
i = 0
while i <= arr.count - 1
  if arr[i] < 0
    arr.insert(i+1, arr[0])
    i += 2
  else
    i += 1
  end
end
arr
'-------------------------------------------------'
puts '29. Дан целочисленный массив. Упорядочить его по возрастанию.'
array = [5, 154, 65, -85, 0, -1111]
array.sort! {|a,b| a <=> b}
'-------------------------------------------------'
puts '30. Дан целочисленный массив. Упорядочить его по убыванию.'
array = [5, 154, 65, -85, 0, -1111]
array.sort! {|a,b| b <=> a}
'-------------------------------------------------'
puts '33. Дан целочисленный массив. Найти индекс минимального элемента'
array = [45, 15, 0, -855, 2]
array.index {|n| n == array.min }
'-------------------------------------------------'
puts '34. Дан целочисленный массив. Найти индекс максимального элемента.'
array = [45, 15, 0, -855, 2]
array.index {|n| n == array.max }
'-------------------------------------------------'
puts '35. Дан целочисленный массив. Найти индекс первого минимального элемента.'
arr = [45, 15, 0, -855, 2]
min = arr.min
arr.find_index { |x| x == min }
'-------------------------------------------------'
puts '36. Дан целочисленный массив. Найти индекс первого максимального элемента.'
arr = [45, 15, 0, -855, 2]
max = arr.max
arr.find_index { |x| x == max }
'-------------------------------------------------'
puts '37. Дан целочисленный массив. Найти индекс последнего минимального элемента.'
arr = [45, 15, 0, -855, 2]
min = arr.min
arr.rindex { |x| x == min }
'-------------------------------------------------'
puts '38. Дан целочисленный массив. Найти индекс последнего максимального элемента.'
arr = [45, 15, 0, -855, 2]
max = arr.max
arr.rindex { |x| x == max }
'-------------------------------------------------'
puts '39. Дан целочисленный массив. Найти количество минимальных элементов.'
arr = [45, 15, 0, -855, 2]
arr_min = arr.min
arr.count {|n| n == arr_min}
'-------------------------------------------------'
puts '40. Дан целочисленный массив. Найти количество максимальных элементов.'
arr = [45, 15, 0, 29, -855, 2]
arr_max= arr.max
arr.count {|n| n == arr_max}
'-------------------------------------------------'
puts '41. Дан целочисленный массив. Найти минимальный четный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n.even?}).min
'-------------------------------------------------'
puts '42. Дан целочисленный массив. Найти минимальный нечетный элемент.'
array = [33, -66, 23, -105, 1, 52]
array.select {|n| n.odd?}.min
'-------------------------------------------------'
puts '43. Дан целочисленный массив. Найти максимальный четный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n.even?}.max
'-------------------------------------------------'
puts '44. Дан целочисленный массив. Найти максимальный нечетный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n.odd?}.max
'-------------------------------------------------'
puts '45. Дан целочисленный массив. Найти минимальный положительный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n > 0}.min
'-------------------------------------------------'
puts '46. Дан целочисленный массив. Найти максимальный отрицательный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n < 0}.max
'-------------------------------------------------'
puts '47. Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.'
array = [33, -66, 23, -105, 1, 52]
array[0...-1].min
'-------------------------------------------------'
puts '48. Дан целочисленный массив и интервал a..b. Найти максимальный из элементов в этом интервале.'
array = [33, -66, 23, -105, 1, 52]
array[1...4].max
'-------------------------------------------------'
puts '49. Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным.'
arr = [0, 1, 3, 4, -5, 5, 6]
arr_min = arr.min
count = 0
arr.each do |n|
  break if n == arr_min
  count += 1
end
count
'-------------------------------------------------'
puts '50. Дан целочисленный массив. Найти количество элементов, расположенных перед первым максимальным.'
arr = [0, 1, 3, 4, -5, 5, 6]
arr_max = arr.max
count = 0
arr.each do |n|
  break if n == arr_max
  count += 1
end
count
'-------------------------------------------------'
puts '61. Дан целочисленный массив. Найти два наибольших элемента.'
array = [33, -66, 23, -105, 1, 52]
array.max(2)
'-------------------------------------------------'
puts '62. Дан целочисленный массив. Найти два наименьших элемента.'
array = [33, -66, 23, -105, 1, 52]
array.min(2)
'-------------------------------------------------'
puts '65. Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные.'
array = [33, -66, 23, -105, 1, 52]
array.select {|n| n.even?} + array.select {|n| n.odd?}
'-------------------------------------------------'
puts '66. Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные.'
array = [33, -66, 23, -105, 1, 52]
array.select {|n| n.odd?} + array.select {|n| n.even?}
'-------------------------------------------------'
puts '79. Дан целочисленный массив. Возвести в квадрат отрицательные элементы и в третью степень - положительные. Нулевые элементы - не изменять.'
array = [-2, -3, 0, 2, 3]
array.each_index do |i|
  array[i] = array[i]**3 if array[i] > 0
  array[i] = array[i]**2 if array[i] < 0
end
'-------------------------------------------------'
puts '87. Дан целочисленный массив. Найти все четные элементы.'
array = [-3, -6, -11, 0, 58, 856, 57]
array.select {|element| element.even?}
'-------------------------------------------------'
puts '88. Дан целочисленный массив. Найти количество четных элементов.'
array = [-3, -6, -11, 0, 58, 856, 57]
array.count {|element| element.even?}
'-------------------------------------------------'
puts '89. Дан целочисленный массив. Найти все нечетные элементы.'
array = [-3, -6, -11, 0, 58, 856, 57]
array.select {|element| element.odd?}
'-------------------------------------------------'
puts '90. Дан целочисленный массив. Найти количество нечетных элементов.'
array = [-3, -6, -11, 0, 58, 856, 57]
array.count {|element| element.odd?}
'--------------------------------------------------'
