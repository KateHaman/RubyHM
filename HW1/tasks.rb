'Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
arr = [-11, -9, -7, -5, -3, -1, 0, 2, 4, 6, 8, 10]
arr.select.with_index {|n, idx| idx.even?}
=>[-11, -7, -3, 0, 4, 8]
arr.select.with_index {|n, idx| idx.odd?}
=>[-9, -5, -1, 2, 6, 10]
'-------------------------------------------------'
'Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
arr = [-11, -9, -7, -5, -3, -1, 0, 2, 4, 6, 8, 10]
arr.select.with_index {|n, idx| idx.odd?}
=>[-9, -5, -1, 2, 6, 10]
arr.select.with_index {|n, idx| idx.even?}
=>[-11, -7, -3, 0, 4, 8]
'-------------------------------------------------'
'Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
arr = [0, 25]
arr.index(arr.select {|num| arr[0] < num && num < arr[-1]}.first) || []
=>[]
'-------------------------------------------------'
'Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
arr = [0, 2, 3]
arr.index(arr.select {|num| arr[0] < num && num < arr[-1]}.last) || []
=>1
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.even?}).map {|a| arr[0]+a}
=>[6, 8]
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.even?}).map {|a| arr[-1]+a}
=>[11, 13]
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам последний элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.odd?}).map {|a| arr[-1]+a}
=>[10, 12]
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам первый элемент. Первый и последний элементы массива не изменять.'
arr = [2, 3, 4, 5, 6, 7]
(arr[1..-2].select.with_index{|n, idx| n.odd?}).map {|a| arr[0]+a}
=>[5, 7]
'-------------------------------------------------'
'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
arr = [-20, 5, -3, 0, 11, -22]
arr.rotate(1)
=>[5, -3, 0, 11, -22, -20]
'-------------------------------------------------'
'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
arr = [-20, 5, -3, 0, 11, -22]
arr.rotate(-1)
=>[-22, -20, 5, -3, 0, 11]
'-------------------------------------------------'
'Дан целочисленный массив. Упорядочить его по возрастанию.'
array = [5, 154, 65, -85, 0, -1111]
array1 = array.sort {|a,b| a <=> b}
array1
=>[-1111, -85, 0, 5, 65, 154]
'-------------------------------------------------'
'Дан целочисленный массив. Найти индекс минимального элемента'
array = [45, 15, 0, -855, 2]
array.index {|n| n == array.min }
=>3
'-------------------------------------------------'
'Дан целочисленный массив. Найти индекс максимального элемента.'
array = [45, 15, 0, -855, 2]
array.index {|n| n == array.max }
=>0
'-------------------------------------------------'
'Дан целочисленный массив. Найти минимальный четный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n.even?}).min
=>-66
'-------------------------------------------------'
'Дан целочисленный массив. Найти минимальный нечетный элемент.'
array = [33, -66, 23, -105, 1, 52]
array.select {|n| n.odd?}).min
=>-105
'-------------------------------------------------'
'Дан целочисленный массив. Найти максимальный четный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n.even?}).max
=>52
'-------------------------------------------------'
'Дан целочисленный массив. Найти максимальный нечетный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n.odd?}).max
=>33
'-------------------------------------------------'
'Дан целочисленный массив. Найти минимальный положительный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n > 0}).min
=>1
'-------------------------------------------------'
'Дан целочисленный массив. Найти максимальный отрицательный элемент.'
array = [33, -66, 23, -105, 1, 52]
(array.select {|n| n < 0}).max
=>-66
'-------------------------------------------------'
'Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.'
array = [33, -66, 23, -105, 1, 52]
array[0...-1].min
=>-105
'-------------------------------------------------'
'Дан целочисленный массив и интервал a..b. Найти максимальный из элементов в этом интервале.'
array = [33, -66, 23, -105, 1, 52]
array[1...4].max
=>23
'-------------------------------------------------'
'Дан целочисленный массив. Найти два наибольших элемента.'
array = [33, -66, 23, -105, 1, 52]
array.max(2)
=>[52, 33]
'-------------------------------------------------'
'Дан целочисленный массив. Найти два наименьших элемента.'
array = [33, -66, 23, -105, 1, 52]
array.min(2)
=>[-105, -66]
'-------------------------------------------------'
'Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные.'
array = [33, -66, 23, -105, 1, 52]
array.select {|n| n.even?} + array.select {|n| n.odd?}
=>[-66, 52, 33, 23, -105, 1]
'-------------------------------------------------'
'Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные.'
array = [33, -66, 23, -105, 1, 52]
array.select {|n| n.odd?} + array.select {|n| n.even?}
=>[33, 23, -105, 1, -66, 52]
'-------------------------------------------------'
'Дан целочисленный массив. Найти количество его локальных максимумов.'
count = 0
for i in 1..-2
count += 1 if arr[i] > arr[i-1] && arr[i] > arr[i+1]
end
count
'-------------------------------------------------'
'Дан целочисленный массив. Найти количество его локальных минимумов.'
count = 0
for i in 1..-2
count += 1 if arr[i] < arr[i-1] && arr[i] < arr[i+1]
end
count
'-------------------------------------------------'
'Дан целочисленный массив. Найти максимальный из его локальных максимумов.'
maxs = []
for i in 1..-2
maxs.push(arr[i]) if arr[i] > arr[i-1] && arr[i] > arr[i+1]
end
maxs.max
'-------------------------------------------------'
'Дан целочисленный массив. Найти минимальный из его локальных минимумов.'
mins = []
for i in 1..-2
    mins.push(arr[i]) if arr[i] < arr[i-1] && arr[i] < arr[i+1]
end
mins.min
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
i = 0
while i <= arr.count - 1
if arr[i] < 0
arr.insert(i, 0)
i += 2
else
i += 1
end
end
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.'
i = 0
while i <= arr.count - 1
if arr[i] < 0
arr.insert(i, 0)
i += 2
else
i += 1
end
end
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
i = 0
while i <= arr.count +1
if arr[i] > 0
arr.insert(i, 0)
i += 1
else
i += 1
end
end
'-------------------------------------------------'
'Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.'
i = 0
while i <= arr.count + 1
if arr[i] < 0
arr.insert(i, 0)
i += 1
else
i += 1
end
end
'-------------------------------------------------'
'Дан целочисленный массив. Найти индекс первого минимального элемента.'
def min_idx(arr)
min = arr.min.first
arr.find_index { |x| x == min }
end
'-------------------------------------------------'
'Дан целочисленный массив. Найти индекс первого максимального элемента.'
def max_idx(arr)
max = arr.max.first
arr.find_index { |x| x == max }
end
'-------------------------------------------------'
'Дан целочисленный массив. Найти индекс последнего минимального элемента.'
def min_idx(arr)
min = arr.min.last
arr.find_index { |x| x == min }
end
'-------------------------------------------------'
'Дан целочисленный массив. Найти индекс последнего максимального элемента.'
def max_idx(arr)
max = arr.max.last
arr.find_index { |x| x == max }
end
'-------------------------------------------------'
